<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>biz.netcentric.maven.security</groupId>
        <artifactId>pickaxe</artifactId>
        <version>2.3-SNAPSHOT</version>
    </parent>

    <artifactId>pickaxe-scans</artifactId>
    <packaging>jar</packaging>

    <name>Pickaxe :: CLI and Build in scans and checks</name>
    <description>Build in security checks for the DSL checker and public interface</description>

    <properties>
        <base.class>biz.netcentric.security.scans.PickaxeCommandLineClient</base.class>
        <artifactId>${project.artifactId}</artifactId>
        <file>entrypoint.sh</file>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>pickaxe-core</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy</artifactId>
        </dependency>

        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-cli-picocli</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-commons</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-netty</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-client-java</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-core</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-plugin-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>addSources</goal>
                            <goal>addTestSources</goal>
                            <!-- note that stubs are needed so Mojo annotations will work -->
                            <!--<goal>generateStubs</goal>-->
                            <goal>compile</goal>
                            <goal>compileTests</goal>
                            <!--<<goal>removeStubs</goal>-->

                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>${base.class}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>${base.class}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <configuration>
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>${base.class}</mainClass>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <verbose>true</verbose>
                    <images>
                        <image>
                            <name>netcentric/pickaxe-security-scanner:latest</name>
                            <alias>pickaxe-security-scanner</alias>
                            <build>
                                <filter>@</filter>
                                <contextDir>${project.basedir}/src/main/docker</contextDir>
                                <assembly>
                                    <descriptorRef>artifact-with-dependencies</descriptorRef>
                                    <name>artifact</name>
                                    <targetDir>/app</targetDir>
                                </assembly>
                            </build>
                        </image>
                       <!-- <image>
                            <name>netcentric/pickaxe-security-scanner:latest</name>
                            <alias>pickaxe-security-scanner</alias>
                            <build>
                                <from>openjdk:11</from>
                                <maintainer>thomas@netcentric.biz</maintainer>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${project.version}</tag>
                                </tags>
                                <assemblies>
                                    <assembly>
                                        <descriptorRef>artifact-with-dependencies</descriptorRef>
                                        <name>artifact</name>
                                        <targetDir>/app</targetDir>
                                    </assembly>
                                </assemblies>
                                <volumes>
                                    <volume>/app/output</volume>
                                    <volume>/app/checks</volume>
                                    <volume>/app/scan</volume>
                                </volumes>
                                <env>
                                    <URL>null</URL>
                                    <CHECKS>null</CHECKS>
                                </env>
                                <entryPoint>
                                    <exec>
                                        <arg>/bin/sh</arg>
                                        <arg>-c</arg>
                                        <arg>java -jar /app/${project.artifactId}-${project.version}.jar location /app/checks output /app/output $0 $@</arg>
                                    </exec>
                                </entryPoint>
                            </build>
                        </image>-->
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>docker-build</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
